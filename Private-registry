
This procedure sets up a private docker registry on controller-0 called myregistry and it will be using port 18001 for the both external port and 
the internal port of the conainter (registry) will be listening on.


*********Pre-work*******************************
Modify your /etc/hosts file to reflect the name of your local registry and port of your localhost, optional add a ::1 (IPv6) line to match localhost line.  
Example below showing a newly named private registry called "myregistry"

controller-0:~$ cat /etc/hosts
# HEADER: This file was autogenerated at 2020-01-06 18:01:14 +0000
# HEADER: by puppet.  While it can still be managed manually, it
# HEADER: is definitely not recommended.
127.0.0.1       localhost       localhost.localdomain localhost4 localhost4.localdomain4 myregistry
::1             localhost       localhost.localdomain localhost4 localhost4.localdomain4 myregistry
192.168.204.1   controller
169.254.202.1   pxecontroller
147.11.125.83   oamcontroller
192.168.204.4   controller-platform-nfs
192.168.204.3   controller-1
192.168.204.2   controller-0
192.168.206.3   controller-1-cluster-host
192.168.206.2   controller-0-cluster-host
192.168.204.89  storage-0

********Start Procedure**************************

1. Create a secret, username and password for Kubernetes access to myregistry on port 18001.  Below example shows the secret as admin, username and passwords are admin as well.

[sysadmin@controller-0 ~(keystone_admin)]$ kubectl create secret docker-registry admin --docker-server=myregistry:18001 --docker-username=admin --docker-password=admin --docker-email=noreply@windriver.com


2. Next create and start the registry.  When 18001:18001 is shown the left side number is the host port and the right side number is the port the container is listening on.

[sysadmin@controller-0 ~(keystone_admin)]$ sudo docker run -d -e REGISTRY_HTTP_ADDR=0.0.0.0:18001 -p 18001:18001 --name myregistry registry:2

3. Login to the registry using login command shown below.  This login creates a ~/.dockercfg file that is used by subsequent docker push and docker pull commands to this registry.  Username and password are from step 1.
 
[sysadmin@controller-0 ~(keystone_admin)]$ sudo docker login myregistry:18001
Username: admin
Password: admin
WARNING! Your password will be stored unencrypted in /root/.docker/config.json.
Configure a credential helper to remove this warning. See
https://docs.docker.com/engine/reference/commandline/login/#credentials-store

Login Succeeded


4. Next, pull the hello-world docker image from dockerhub, any image will do here.  This will pull down as hello-world with a "latest" tag as shown in step 5.  It is not in the myregistry yet at this point.

[sysadmin@controller-0 ~(keystone_admin)]$ sudo docker pull hello-world

5. [sysadmin@controller-0 ~(keystone_admin)]$ sudo docker images
The file will be refereneced in future docker command line as <image-name>:<tag> so in this case hello-world:latest

6. Tag the pulled image so that it points to the myregistry.  Your original pulled image is left as is, a duplicate is made and in this case renamed to point at your private registry.  It is not in your private registry yet.  

Syntax: docker tag <image name> <host/new image name>

[sysadmin@controller-0 ~(keystone_admin)]$ sudo docker tag hello-world:latest myregistry:18001/testrepo/myhelloworld


7. Push the new version of hello-world image into your private registry as new file name myhelloworld.

Syntax: docker push <host/new image name>

[sysadmin@controller-0 ~(keystone_admin)]$ sudo docker push myregistry:18001/testrepo/myhelloworld
The push refers to repository [myregistry:18001/testrepo/myhelloworld]
af0b15c8625b: Pushed
latest: digest: sha256:92c7f9c92844bbbb5d0a101b22f7c2a7949e40f8ea90c8b3bc396879d95e899a size: 524

8. To confirm a pull can be performed from the private registry remove the locally-cached hello-world:latest and myregistry:18001/testrepo/myhelloworld images, so that you can test pulling the image from your private registry.  This does not remove the myregistry:18001/testrepo/myhelloworld image from your private registry.

[sysadmin@controller-0 ~(keystone_admin)]$ sudo docker image remove hello-world:latest
Untagged: hello-world:latest
Untagged: hello-world@sha256:9572f7cdcee8591948c2963463447a53466950b3fc15a247fcad1917ca215a2f

[sysadmin@controller-0 ~(keystone_admin)]$ sudo docker image remove myregistry:18001/testrepo/myhelloworld
Untagged: myregistry:18001/testrepo/myhelloworld:latest
Untagged: myregistry:18001/testrepo/myhelloworld@sha256:92c7f9c92844bbbb5d0a101b22f7c2a7949e40f8ea90c8b3bc396879d95e899a
Deleted: sha256:fce289e99eb9bca977dae136fbe2a82b6b7d4c372474c9235adc1741675f587e
Deleted: sha256:af0b15c8625bb1938f1d7b17081031f649fd14e6b233688eea3c5483994a66a3

9. Confirm the images are gone from cache.

[sysadmin@controller-0 ~(keystone_admin)]$ sudo docker images

10. Pull the myregistry:18001/testrepo/myhelloworld image from your private registry.

[sysadmin@controller-0 ~(keystone_admin)]$ sudo docker pull myregistry:18001/testrepo/myhelloworld
Using default tag: latest
latest: Pulling from testrepo/myhelloworld
1b930d010525: Pull complete
Digest: sha256:92c7f9c92844bbbb5d0a101b22f7c2a7949e40f8ea90c8b3bc396879d95e899a
Status: Downloaded newer image for myregistry:18001/testrepo/myhelloworld:latest

11. Confirm image is now in cache

[sysadmin@controller-0 ~(keystone_admin)]$ sudo docker images


*****************Backout Procedure**************************************

1. To start over or remove the private registry and it's images stop the registry and remove the registry's container.  Below are the two commands needed to do this using the myregistry as the registry and container name.  When stopping the private registry container, this will delete the images stored in the private registry.

[sreysadmin@controller-0 ~(keystone_admin)]$ sudo docker container stop myregistry

[sysadmin@controller-0 ~(keystone_admin)]$ sudo docker container rm -v myregistry

2. Remove any pulled images from cache as needed. Example below removing first hello-world:latest pull.

[sysadmin@controller-0 ~(keystone_admin)]$ sudo docker image rm hello-world:latest
